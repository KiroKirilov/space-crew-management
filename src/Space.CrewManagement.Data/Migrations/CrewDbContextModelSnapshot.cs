// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Space.CrewManagement.Data;

#nullable disable

namespace Space.CrewManagement.Data.Migrations
{
    [DbContext(typeof(CrewDbContext))]
    partial class CrewDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Space.CrewManagement.Data.Models.CrewMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateOnly>("LastCertificationDate")
                        .HasColumnType("date");

                    b.Property<Guid>("LicenseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LicenseId");

                    b.HasIndex("MemberTypeId");

                    b.ToTable("CrewMembers");
                });

            modelBuilder.Entity("Space.CrewManagement.Data.Models.License", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ead47c5e-c268-44ea-8837-30ff16e0ee10"),
                            Description = " Pilots with an ATP certificate are eligible to fly for an airline and will meet the hiring minimums of most regional airline pilot jobs.",
                            Name = "Airline transport pilot (ATP) license"
                        },
                        new
                        {
                            Id = new Guid("09917044-4413-43a4-82bf-4689ba49d2a2"),
                            Description = " An individual wishing to work as a cabin crewmember in commercial air transport within an EC member State must hold a valid cabin crew attestation(CCA).",
                            Name = "Cabin crew license"
                        });
                });

            modelBuilder.Entity("Space.CrewManagement.Data.Models.MemberType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MemberTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b"),
                            Name = "Pilot",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("f3b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3c"),
                            Name = "Regular",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("f3b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3d"),
                            Name = "Steward",
                            Type = 2
                        });
                });

            modelBuilder.Entity("Space.CrewManagement.Data.Models.CrewMember", b =>
                {
                    b.HasOne("Space.CrewManagement.Data.Models.License", "License")
                        .WithMany("CrewMembers")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Space.CrewManagement.Data.Models.MemberType", "MemberType")
                        .WithMany("CrewMembers")
                        .HasForeignKey("MemberTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("License");

                    b.Navigation("MemberType");
                });

            modelBuilder.Entity("Space.CrewManagement.Data.Models.License", b =>
                {
                    b.Navigation("CrewMembers");
                });

            modelBuilder.Entity("Space.CrewManagement.Data.Models.MemberType", b =>
                {
                    b.Navigation("CrewMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
